{"version":3,"sources":["method/index.js","context/index.js","components/BackArrow.js","components/Calculator.js","components/Main.js","components/Code.js","App.js","index.js"],"names":["solve","m","newMatrix","i","length","x","filter","v","idx","push","det","j","add","multiply","divide","includes","NaN","Infinity","value","decimals","values","variable","Number","Math","round","reverse","getResult","gaussianElim","Context","React","createContext","Provider","children","useState","incog","setIncog","setValues","inputs","setInputs","result","setResult","error","setError","useEffect","parseInt","a","Array","from","keys","handleMainInput","e","target","handleInputs","newValues","createMatrix","undefined","current","row","refresh","BackArrow","useContext","to","className","onClick","xmlns","id","fill","viewBox","stroke","d","Calculator","type","placeholder","onChange","map","val","Main","href","Code","text","language","theme","dracula","showLineNumbers","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddab1aca.chunk.js","sourcesContent":["import { det, multiply, add, divide } from \"mathjs\";\r\n\r\nfunction round(value, decimals) {\r\n  /* \r\n  Funcion para redondear\r\n  */\r\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\r\n}\r\n\r\nconst getResult = (m) => {\r\n  /* Por ultimo, se obtienen las respuestas de la matriz \r\n    ya modificada. Lo que se hace es obtener la ultima columna\r\n    y hacer las operaciones correspondients para obtener\r\n    la respuesta\r\n    */\r\n  let values = [];\r\n\r\n  for (let i = m.length - 1; i >= 0; i--) {\r\n    let idx = 0;\r\n    let x = m[0].length - 2; //Penultima columna\r\n\r\n    let variable = m[i][m[0].length - 1]; //Ultima columna\r\n\r\n    //Operacion asi obtener el valor de cada variable\r\n    while (idx < values.length) {\r\n      variable = variable - m[i][x] * values[idx];\r\n      idx++;\r\n      x--;\r\n    }\r\n    values.push(round(variable, 3));\r\n  }\r\n  return values.reverse();\r\n};\r\n\r\nconst gaussianElim = (m) => {\r\n  /* Funcion principal. Esta se encarga de ejecutar el metodo\r\n     principal de eliminación gaussiana. Itera en la matriz\r\n     asi logra las diagonal unitaria y ceros\r\n  */\r\n\r\n  for (let i = 0; i < m.length; i++) {\r\n    let j = 0;\r\n    while (i > j) {\r\n      m[i] = add(m[i], multiply(multiply(m[j], m[i][j]), -1));\r\n      j += 1;\r\n    }\r\n    m[i] = divide(m[i], m[i][i]);\r\n\r\n    //Revisamos la matriz para ver si no tiene solución\r\n    if (m[i].includes(NaN) || m[i].includes(Infinity)) {\r\n      return [\"No hay solución\"];\r\n    }\r\n  }\r\n  return getResult(m);\r\n};\r\n\r\nconst solve = (m) => {\r\n  /* Determina si la matriz tiene solucion. \r\n    En caso de que si, llama a la funcion que empieza el \r\n    metodo. Para ver el determinante hay que eliminar la ultima\r\n    columna */\r\n  let newMatrix = [];\r\n  for (let i = 0; i < m.length; i++) {\r\n    let x = m[i].filter((v, idx) => idx !== m[0].length - 1);\r\n    newMatrix.push(x);\r\n  }\r\n  let determinant = det(newMatrix);\r\n  if (determinant === 0) {\r\n    return [\"Solución infinita\"];\r\n  } else {\r\n    return gaussianElim(m);\r\n  }\r\n};\r\n\r\nexport { solve };\r\n","import React from \"react\";\r\nimport { solve } from \"../method\";\r\n\r\nconst Context = React.createContext();\r\n\r\nfunction Provider({ children }) {\r\n  const [incog, setIncog] = React.useState(\"\");\r\n  const [values, setValues] = React.useState([]);\r\n  const [inputs, setInputs] = React.useState([]);\r\n  const [result, setResult] = React.useState(\"\");\r\n\r\n  let [error, setError] = React.useState(\"\");\r\n\r\n  /* Errors on typing,blank, etc */\r\n  function handleErrors() {\r\n    setError(\"\");\r\n    setResult(\"\");\r\n    setValues([]);\r\n\r\n    if (parseInt(incog) < 2) {\r\n      setError(\"Numero de incognitas debe ser mayor a 1\");\r\n      setInputs([]);\r\n      return true;\r\n    } else if (parseInt(incog) > 6) {\r\n      setError(\"Numero de incognitas debe ser menor a 6\");\r\n      setInputs([]);\r\n      return true;\r\n    } else if (incog === \"\") {\r\n      setInputs([]);\r\n      return true;\r\n    }\r\n  }\r\n  /* Cada vez el numero de incognitas se modifica */\r\n  React.useEffect(() => {\r\n    let e = handleErrors();\r\n    if (!e) {\r\n      let a = Array.from(Array(parseInt(incog) * (parseInt(incog) + 1)).keys());\r\n      setInputs(a);\r\n    }\r\n  }, [incog]);\r\n\r\n  /* Errors after btn is pressed */\r\n  function handleErrorsOnSubmit() {\r\n    if (incog === \"\") {\r\n      setError(\"Debes añadir el número de incognitas\");\r\n      return true;\r\n    } else if (\r\n      values.includes(undefined) ||\r\n      values.length < parseInt(incog) * (parseInt(incog) + 1) ||\r\n      values.includes(NaN)\r\n    ) {\r\n      setError(\"La matriz debe estar completamente definida\");\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /* Refresh everything */\r\n  function refresh() {\r\n    setIncog(\"\");\r\n    setError(\"\");\r\n    setResult(\"\");\r\n    setValues([]);\r\n    setInputs([]);\r\n  }\r\n\r\n  /* INPUT => incognitas */\r\n  function handleMainInput(e) {\r\n    setIncog(e.target.value);\r\n  }\r\n\r\n  /* INPUTS: Valores de la matriz */\r\n  function handleInputs(e, idx) {\r\n    let newValues = [...values];\r\n    newValues[idx] = parseInt(e.target.value);\r\n    setValues(newValues);\r\n    setError(\"\");\r\n  }\r\n\r\n  /* Crear la matriz => Separa los valores del arreglo y crea una matriz */\r\n  function createMatrix() {\r\n    let e = handleErrorsOnSubmit();\r\n    if (!e) {\r\n      setError(\"\");\r\n\r\n      let result = [];\r\n      let j = 0;\r\n      let current = parseInt(incog) + 1;\r\n      for (let i = 0; i < parseInt(incog); i++) {\r\n        let row = [];\r\n        while (j < current) {\r\n          row.push(values[j]);\r\n          j++;\r\n        }\r\n        result.push(row);\r\n        current += parseInt(incog) + 1;\r\n      }\r\n      setResult(solve(result));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        setIncog,\r\n        setInputs,\r\n        handleMainInput,\r\n        handleInputs,\r\n        createMatrix,\r\n        setValues,\r\n        refresh,\r\n        result,\r\n        values,\r\n        error,\r\n        incog,\r\n        inputs,\r\n      }}\r\n    >\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport { Context, Provider };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Context } from \"../context\";\r\n\r\nimport \"../index.css\";\r\n\r\nfunction BackArrow() {\r\n  const { refresh } = React.useContext(Context);\r\n  return (\r\n    <Link\r\n      to=\"/\"\r\n      className=\"absolute top-0 left-0 cursor-pointer m-5 h-6 w-6 sm:h-8 sm:w-8 sm:m-7 md:h-12 md:w-12 md:m-10 lg:h-15 lg:w-15 lg:m-10\"\r\n      onClick={refresh}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        id=\"BackArrow\"\r\n        className={`rounded-full border-2 border-gray-900 text-gray-900`}\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n      >\r\n        <path d=\"M10 19l-7-7m0 0l7-7m-7 7h18\" />\r\n      </svg>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport { BackArrow };\r\n","import { BackArrow } from \"./BackArrow\";\r\nimport { Context } from \"../context\";\r\n\r\nimport React from \"react\";\r\nimport \"../index.css\";\r\n\r\nfunction Calculator() {\r\n  const {\r\n    incog,\r\n    inputs,\r\n    handleMainInput,\r\n    handleInputs,\r\n    createMatrix,\r\n    result,\r\n    error,\r\n  } = React.useContext(Context);\r\n\r\n  return (\r\n    <div\r\n      id=\"calculator\"\r\n      className=\"px-5 w-full flex flex-wrap content-center justify-center\"\r\n    >\r\n      {/* Arrow ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */}\r\n      <BackArrow />\r\n      {/* TITLE- -----------------------------------------------> */}\r\n      <h1\r\n        className={`w-full py-10 mt-3 text-5xl font-semibold text-gray-800 text-center self-center sm:text-7xl md:text-8xl xl:text-9xl`}\r\n      >\r\n        Calculadora\r\n      </h1>\r\n      {/* MAIN INPUT-----------------------------------------------> */}\r\n      <input\r\n        type=\"number\"\r\n        className={`p-5 w-full text-sm border-2 focus:border-red-300 hover:border-red-300 rounded outline-none sm:text-xl md:text-2xl xl:text-3xl`}\r\n        placeholder=\"Número de Incognitas (max 6)\"\r\n        value={incog}\r\n        onChange={handleMainInput}\r\n      />\r\n      {/* MATRIX INPUTSSS-----------------------------------------------> */}\r\n      <div\r\n        className={`w-full grid grid-cols-${\r\n          parseInt(incog) + 1\r\n        } grid-rows-${incog} gap-2 my-4`}\r\n        id=\"inputs\"\r\n      >\r\n        {inputs.map((idx) => {\r\n          return (\r\n              <input\r\n                type=\"number\"\r\n                className={`w-4/6 py-2 text-sm text-gray-800 place-self-center text-center border-2 focus:border-red-300 hover:border-red-300 rounded outline-none sm:text-xl md:text-2xl xl:text-3xl`}\r\n                placeholder={`${idx}`}\r\n                onChange={(e) => handleInputs(e, idx)}\r\n              />\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* ERROR ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */}\r\n      {error ? (\r\n        <h2\r\n          className={`w-full text-sm text-center text-red-700 my-6 sm:text-xl md:text-2xl xl:text-3xl`}\r\n        >\r\n          {error}\r\n        </h2>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      {/* CALC BUTTON ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */}\r\n\r\n      <a\r\n        onClick={createMatrix}\r\n        className={`border-2 cursor-pointer rounded text-sm hover:border-red-300 text-gray-800 focus:border-red-300  outline-none mb-3 px-5 py-3 sm:text-xl md:text-2xl xl:text-3xl`}\r\n      >\r\n        Calcular\r\n      </a>\r\n\r\n      {/* RESULTADO ----------------------------------> */}\r\n      <div className=\"w-full flex flex-wrap justify-around items-center\">\r\n        {result\r\n          ? result.length < 2\r\n            ? result.map((val) => {\r\n                return (\r\n                  <h1\r\n                    className={` px-4 text-red-500 text-sm text-center sm:text-xl md:text-2xl xl:text-3xl`}\r\n                  >\r\n                    {val}\r\n                  </h1>\r\n                );\r\n              })\r\n            : result.map((val, idx) => {\r\n                return (\r\n                  <h1\r\n                    className={`text-sm p-4 text-green-500 sm:text-xl md:text-2xl xl:text-3xl`}\r\n                  >\r\n                    x<sub>{`${idx + 1}`}</sub>\r\n                    {` = ${val}`}\r\n                  </h1>\r\n                );\r\n              })\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Calculator };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BsGithub } from \"react-icons/bs\";\r\n\r\nimport \"../index.css\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <div className=\"w-full h-full flex flex-wrap\" id=\"principal\">\r\n      <a href=\"https://github.com/Jrigoo\">\r\n        {\" \"}\r\n        <BsGithub\r\n          className=\"absolute top-0 right-0 text-gray-800 cursor-pointer hidden lg:block lg:h-16 lg:w-16 lg:m-10\"\r\n          id=\"git-hub\"\r\n        />\r\n      </a>\r\n\r\n      <h1\r\n        className={`w-full py-10 text-5xl font-semibold text-gray-800 text-center self-center sm:text-7xl md:text-8xl xl:text-9xl`}\r\n        id=\"main__title\"\r\n      >\r\n        Eliminación Gaussiana\r\n      </h1>\r\n      <div className=\"w-full grid grid-cols-2 auto-rows-min gap-2 \">\r\n        <Link\r\n          className=\"group mx-4 p-3 rounded border-2 border-gray-300 hover:bg-red-500 \"\r\n          to=\"/calculator\"\r\n        >\r\n          <h2\r\n            className={`text-lg text-gray-800 group-hover:text-gray-50 text-center sm:text-xl md:text-2xl xl:text-3xl`}\r\n          >\r\n            Calculadora\r\n          </h2>\r\n          <p\r\n            className={`text-sm text-gray-700 font-extralight group-hover:text-white text-center sm:text-lg md:text-xl xl:text-2xl`}\r\n          >\r\n            Usar la calculadora\r\n          </p>\r\n        </Link>\r\n        <Link\r\n          className=\"group mx-4 p-3 rounded border-2 border-gray-300 hover:bg-red-500 \"\r\n          to=\"/code\"\r\n        >\r\n          <h2\r\n            className={`text-lg text-gray-800 group-hover:text-gray-50 text-center sm:text-xl md:text-2xl xl:text-3xl`}\r\n          >\r\n            Código\r\n          </h2>\r\n          <p\r\n            className={`text-sm text-gray-700 font-extralight group-hover:text-white text-center m:text-lg md:text-xl xl:text-2xl`}\r\n          >\r\n            Ver el codigo principal\r\n          </p>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Main };\r\n","import React from \"react\";\r\n\r\nimport { BackArrow } from \"./BackArrow\";\r\nimport { CodeBlock, dracula } from \"react-code-blocks\";\r\n\r\nimport \"../index.css\";\r\n\r\nconst solve = `const solve = (m) => {\r\n  let newMatrix = [];\r\n  for (let i = 0; i < m.length; i++) {\r\n    let x = m[i].filter((v, idx) => idx !== m[0].length - 1);\r\n    newMatrix.push(x);\r\n  }\r\n  let determinant = det(newMatrix);\r\n  if (determinant === 0) {\r\n    return [\"Solución infinita\"];\r\n  } else {\r\n    return gaussianElim(m);\r\n  }\r\n};`;\r\n\r\nconst gaussianElim = `const gaussianElim = (m) => {\r\n  for (let i = 0; i < m.length; i++) {\r\n    let j = 0;\r\n    while (i > j) {\r\n      m[i] = add(m[i], multiply(multiply(m[j], m[i][j]), -1)); //m[i] - m[j]*m[i][j]\r\n      j += 1;\r\n    }\r\n    m[i] = divide(m[i], m[i][i]);\r\n\r\n    //Revisamos la matriz para ver si no tiene solución\r\n    if (m[i].includes(NaN) || m[i].includes(Infinity)) {\r\n      return [\"No hay solución\"];\r\n    }\r\n  }\r\n  return getResult(m);\r\n  };\r\n`;\r\n\r\nconst getResult = `const getResult = (m) => {\r\n  let values = [];\r\n  for (let i = m.length - 1; i >= 0; i--) {\r\n    let idx = 0;\r\n    let x = m[0].length - 2; \r\n    let variable = m[i][m[0].length - 1]; \r\n  \r\n    while (idx < values.length) {\r\n      variable = variable - m[i][x] * values[idx];\r\n      idx++;\r\n      x--;\r\n    }\r\n    values.push(round(variable, 3));\r\n  }\r\n  return values.reverse();\r\n};`;\r\n\r\nfunction Code() {\r\n  return (\r\n    <div id=\"codigo\" className=\"w-full flex flex-wrap justify-center\">\r\n      <BackArrow />\r\n      {/* TITLE- -----------------------------------------------> */}\r\n      <h1\r\n        className={`w-full py-9 text-5xl font-semibold text-gray-800 text-center self-center sm:text-7xl md:text-8xl xl:text-9xl`}\r\n      >\r\n        Código\r\n      </h1>\r\n\r\n      <div className={`codigo text-xs py-5 sm:text-lg w-5/6`}>\r\n        <CodeBlock\r\n          text={solve}\r\n          language={\"javascript\"}\r\n          theme={dracula}\r\n          showLineNumbers={true}\r\n        />\r\n      </div>\r\n      <p\r\n        className={`text-sm text-justify text-gray-800 p-3 sm:text-lg md:text-xl xl:text-2xl w-5/6`}\r\n      >\r\n        Esta función es la inicial. Determina si la matriz tiene solucion. En\r\n        caso de que si, llama a la funcion que empieza el metodo de eliminación\r\n        gaussiana. Y en caso de que no, envia un error. Para calcular el\r\n        determinante la matriz debe ser cuadrada por lo tanto, la función crea\r\n        una nueva matriz con los mismos valores pero sin la ultima columna.\r\n      </p>\r\n\r\n      <div className={`codigo text-xs py-5 sm:text-lg w-5/6`}>\r\n        <CodeBlock\r\n          text={gaussianElim}\r\n          language={\"javascript\"}\r\n          theme={dracula}\r\n          showLineNumbers={true}\r\n        />\r\n      </div>\r\n      <p\r\n        className={`text-sm text-justify text-gray-800 p-3 sm:text-lg md:text-xl xl:text-2xl w-5/6`}\r\n      >\r\n        Esta función es la que se encarga de ejecutar el metodo de eliminación\r\n        gaussiana. Lo que hace es iterar 3 varias veces la matriz asi lograr la\r\n        diagonal de unos y los ceros.\r\n      </p>\r\n\r\n      <div className={`codigo text-xs py-5 sm:text-lg w-5/6`}>\r\n        <CodeBlock\r\n          text={getResult}\r\n          language={\"javascript\"}\r\n          theme={dracula}\r\n          showLineNumbers={true}\r\n        />\r\n      </div>\r\n      <p\r\n        className={`text-sm text-justify text-gray-800 pb-20 sm:text-lg md:text-xl xl:text-2xl w-5/6`}\r\n      >\r\n        Esta función es la que se encarga de obtener el resultado. Teniendo ya\r\n        la matriz con su diagonal de unos y los ceros. La función itera una vez\r\n        mas sobre esta nueva matriz y realiza las operaciones correspondients\r\n        para obtener nuestras incognitas\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Code };\r\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\n\nimport { Calculator } from \"./components/Calculator\";\nimport { Main } from \"./components/Main\";\nimport { Code } from \"./components/Code\";\n\nimport \"./index.css\";\n\nfunction App() {\n  return (\n    <div id=\"main_page\" className=\"main_page\">\n      <Routes>\n        <Route path=\"/\" element={<Main />} />\n        <Route path=\"/calculator\" element={<Calculator />} />\n        <Route path=\"/code\" element={<Code />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport { App };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"./context\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}